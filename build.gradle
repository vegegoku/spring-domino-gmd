buildscript {
  apply from: "$rootDir/gradle/versions.gradle"
}

plugins {
  id "java"
  id "eclipse"
  id "idea"
  id "org.springframework.boot" version "1.5.10.RELEASE"
  id "net.ltgt.apt" version "0.14"
}

repositories {
  mavenCentral()
  mavenLocal()
  jcenter()
}

apply from: "gradle/gwt.gradle"
apply from: "gradle/java.gradle"
apply from: "gradle/codeQuality.gradle"

dependencies {
  // logger
  compile("org.apache.logging.log4j:log4j-core:$log4jVersion")
  compile("org.apache.logging.log4j:log4j-api:$log4jVersion")

  // gwt-material
  compileOnly("com.github.gwtmaterialdesign:gwt-material:$gwtMaterialVersion")
  compileOnly("com.github.gwtmaterialdesign:gwt-material-addins:$gwtMaterialAddinsVersion")
  compileOnly("com.github.gwtmaterialdesign:gwt-material-themes:$gwtMaterialThemesVersion")
  compileOnly("com.github.gwtmaterialdesign:gwt-material-table:$gwtMaterialTableVersion")

  compileOnly("com.progressoft.brix.domino.api:domino-api-shared:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.api:domino-api-shared:$dominoVersion:sources")

  compileOnly("com.progressoft.brix.domino.api:domino-api-client:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.api:domino-api-client:$dominoVersion:sources")

  compileOnly("com.progressoft.brix.domino.impl:domino-gwt:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.impl:domino-gwt:$dominoVersion:sources")

  compileOnly("com.progressoft.brix.domino.logging:domino-gwt-logger:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.logging:domino-gwt-logger:$dominoVersion:sources")


  compileOnly("com.progressoft.brix.domino:domino-client-commons:$dominoVersion")
  compileOnly("com.progressoft.brix.domino:domino-client-commons:$dominoVersion:sources")


  compileOnly("com.google.elemental2:elemental2-core:1.0.0-RC1")
  compileOnly("com.google.elemental2:elemental2-dom:1.0.0-RC1")


  compileOnly("org.fusesource.restygwt:restygwt:2.2.0")
  annotationProcessor("com.progressoft.brix.domino.apt:apt-client:$dominoVersion")
  annotationProcessor("com.google.auto.service:auto-service:1.0-rc3")
  annotationProcessor "com.google.gwt:gwt-user:$gwtVersion"
  annotationProcessor("com.progressoft.brix.domino.api:domino-api-shared:$dominoVersion")
  annotationProcessor("com.progressoft.brix.domino.api:domino-api-client:$dominoVersion")
  annotationProcessor("com.progressoft.brix.domino.impl:domino-gwt:$dominoVersion")
  

  compileOnly("com.google.auto.service:auto-service:1.0-rc3")

  // GWT framework
  compileOnly("com.google.gwt:gwt-user:$gwtVersion")
  compileOnly("com.google.gwt:gwt-dev:$gwtVersion")

  // spring
  compileOnly("org.springframework.boot:spring-boot-configuration-processor")
  compile("org.springframework.boot:spring-boot-starter-jetty")
  compile("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  compile("javax.ws.rs:javax.ws.rs-api:$wsrsapiVersion")

  compileOnly("org.projectlombok:lombok:$lombokVersion")
  apt("org.projectlombok:lombok:$lombokVersion")

  // common testing
  testCompile("junit:junit:$junitVersion")
  testCompile("org.springframework.boot:spring-boot-starter-test")
}

clean.doFirst {
  delete "${rootDir}/build"
  delete "${rootDir}/war"
}

compileGwt{
  classpath {
    [
        sourceSets.main.java.srcDirs,           // Java source
        sourceSets.main.output.resourcesDir,    // Generated resources
        sourceSets.main.output.classesDir,      // Generated classes
        sourceSets.main.compileClasspath,       // Deps
    ]
  }
}

sourceSets {
  main {
    java {
      srcDirs 'build/generated/source/apt/main'
      srcDirs 'src/main/java/proto/main/java'
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.5.1"
}

eclipse {
  classpath {
    containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
    containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
  }
}

task fastRun {
  gradle.startParameter.excludedTaskNames += "checkstyleMain"
  gradle.startParameter.excludedTaskNames += "checkstyleTest"
  gradle.startParameter.excludedTaskNames += "findbugsMain"
  gradle.startParameter.excludedTaskNames += "findbugsTest"
  gradle.startParameter.excludedTaskNames += "test"
}