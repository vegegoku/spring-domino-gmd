def configDir = new File(rootDir, 'config')
def checkstyleConfigDir = "$configDir/checkstyle"

// configure static code style plugins
apply plugin: 'checkstyle'
checkstyle {
  configFile = new File(checkstyleConfigDir, "checkstyle.xml")
  configProperties.checkstyleConfigDir = checkstyleConfigDir
  ignoreFailures = false
  toolVersion = "8.1"
}

task checkstyleHtml {
  doLast {
    try {
      String xmlReportFilePath = checkstyleMain.reports.xml.destination.parent;
      File xmlReportFile = new File(xmlReportFilePath, "main.xml")
      if (!xmlReportFile.exists()) {
        return;
      }

      ant.xslt(in: checkstyleMain.reports.xml.destination,
          style: file("$checkstyleConfigDir/styles.xsl"),
          out: new File(xmlReportFilePath, 'main.html'))
    }
    catch (Exception e) {
      throw new RuntimeException(e)
    }
  }
}

checkstyleMain.finalizedBy checkstyleHtml

// performs quality checks on your project's Java source files using FindBugs
apply plugin: 'findbugs'
findbugs {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/findbugsReports")
  effort = "max"
  reportLevel = "high"
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

// performs quality checks on your project's source files using JDepend.
//apply plugin: 'jdepend'

// performs quality checks on your project's Java source files using PMD
//apply plugin: 'pmd'

//apply plugin: "jacoco" // test coverage plugin
//jacocoTestReport {
//  reports {
//    xml.enabled false
//    csv.enabled false
//    html.destination "${buildDir}/jacocoHtml"
//  }
//}

//tasks.withType(FindBugs) {
//  reports {
//    xml.enabled = false
//    html.enabled = true
//  }
//}

//tasks.withType(JDepend) {
//  reports {
//    xml.enabled false
//    text.enabled true
//  }
//}